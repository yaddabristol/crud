<?php

namespace Yaddabristol\Crud\Controllers;

use Illuminate\Http\Request as Request;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Route;

abstract class CrudController extends BaseController
{
    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;

    /**
     * The model handled by this controller.
     * E.g. Model::class or 'App\Models\MyModel'
     * @var string
     */
    protected $model = null;

    /**
     * The directory that views are stored in. E.g. 'admin.model'
     * @var string
     */
    protected $views_dir = '';

    /**
     * The name of the model handled by this controller.
     * @var string
     */
    protected $name_singular = 'Base Model';

    /**
     * The plural name of the model handled by this controller.
     * @var string
     */
    protected $name_plural = 'Base Models';

    /**
     * The base route for this controller.
     * @var string
     */
    protected $route = 'admin.base';

    /**
     * Basic validation rules. You may want to alter this in custom
     * doUpdate or doStore methods if they aren't the same.
     */
    protected $rules = [];

    /**
     * Custom validation error messages
     */
    protected $messages = [];

    /**
     * Set this to true to enable pagination on index pages.
     */
    protected $paginate = false;

    /**
     * Settings for ordering, searching and pagination
     */
    protected $settings = [
        'perpage' => 20,
        'orderby' => 'id',
        'order' => 'ASC'
    ];

    /**
     * Fields to search by
     */
    protected $searchables = ['id'];

    /**
     * unique ID column to group by (for advanced queries, may require setting
     * to tablename.column)
     */
    protected $group_by = 'id';

    /**
     * Url mods for building pagination appendations
     */
    protected $url_mods;

    /**
     * Classes to be added to the body tag
     */
    protected $body_classes = [];

    /**
     * Index page table column headings and associated attributes
     */
    protected $table_columns = [
        'ID' => 'id',
        'Name' => 'name',
        'Slug' => 'slug'
    ];

    /**
     * Set to true to enable file uploading.
     */
    protected $has_files = false;

    /**
     * Fields to use in autogenerated form. The options specified here only
     * affect the HTML that is generated by autoform.blade.php. They do not
     * otherwise affect the application. Because of this you can easily create
     * your own field types by just creating a blade file.
     * e.g. views/fields/YOURFIELDNAME.blade.php
     */
    protected $form_fields = [];

    public function __construct(Request $request)
    {
        $this->validate($request, [
            'perpage' => 'numeric|filled',
            'orderby' => 'string|filled|required_with:order',
            'order' => 'in:ASC,DESC|filled|required_with:orderby',
            'search' => 'string'
        ]);

        if($request->has('perpage')) $this->settings['perpage'] = $request->get('perpage');
        if($request->has('orderby')) $this->settings['orderby'] = $request->get('orderby');
        if($request->has('order')) $this->settings['order'] = $request->get('order');
        if($request->has('search')) $this->settings['search'] = $request->get('search');

        $this->generateUrlMods();

        // Append current endpoint name to list of classes
        if(Route::getCurrentRoute()) {
            $route = explode('.', Route::getCurrentRoute()->getName());
            array_shift($route);
            $this->body_classes = $this->body_classes + $route;
            $this->body_classes[] = implode('-', $route);
        }

        view()->share([
            'url_mods'      => $this->url_mods,
            'settings'      => $this->settings,
            'views_dir'     => $this->views_dir,
            'name_singular' => $this->name_singular,
            'name_plural'   => $this->name_plural,
            'body_classes'  => $this->body_classes,
            'route'         => $this->route,
            'table_columns' => $this->table_columns,
            'paginate'      => $this->paginate,
            'form_fields'   => $this->form_fields,
        ]);

        $this->request = $request;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $items = call_user_func($this->model.'::latest');

        if ($request->ajax()) {
            $output = [];

            if (!empty($request->all())) {
                $items = call_user_func($this->model.'::where', $request->all())->get();
            }

            foreach ($items as $item) {
                $output[] = $item->attributesToArray();
            }

            return json_encode($output);
        } else {
            if ($this->paginate) {
                $items = $items->paginate($this->settings['perpage']);
            } else {
                $items = $items->get();
            }

            if (view()->exists($this->views_dir . '.index')) {
                return view($this->views_dir . '.index', compact('items'));
            } else {
                return view('crud::index', compact('items'));
            }
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $this->body_classes[] = 'create';
        $item = new $this->model;
        $data = [
            'item' => $item,
            'has_files' => $this->has_files,
        ];

        if (view()->exists($this->views_dir . '.create')) {
            return view($this->views_dir . '.create', $data);
        } else {
            return view('crud::create', $data);
        }
    }

    /**
     * Save the details from the create form to the database
     * @param  Request $request
     * @return |Illuminate|Http|Response
     */
    public function store(Request $request)
    {
        $this->beforeStore();

        $this->validate($request, $this->rules, $this->messages);

        call_user_func($this->model . '::create', request()->all());

        $this->afterStore();

        if ($request->ajax()) {
            return json_encode([
                'status' => 'success',
                'data' => null
            ]);
        } else {
            return redirect()->route($this->route . '.index')->with('success', $this->name_singular . ' was created successfully.');
        }
    }

    /**
     * Hook for before data is validated and stored
     * @return None
     */
    protected function beforeStore() {}

    /**
     * Hook for after data has been stored
     * @return None
     */
    protected function afterStore() {}

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request, $id)
    {
        $this->body_classes[] = 'show';
        $item = call_user_func($this->model . '::findOrFail', $id);
        $data = compact('item');

        if ($request->ajax()) {
            return json_encode($item);
        } else {
            if (view()->exists($this->views_dir . '.show')) {
                return view($this->views_dir . '.show', $data);
            } else {
                return view('crud::show', $data);
            }
        }
    }


    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $this->body_classes[] = 'edit';
        $item = call_user_func($this->model . '::findOrFail', $id);
        $data = [
            'item' => $item,
            'has_files' => $this->has_files
        ];

        if (view()->exists($this->views_dir . '.edit')) {
            return view($this->views_dir . '.edit', $data);
        } else {
            return view('crud::edit', $data);
        }
    }


    /**
     * Update the specified resource in storage.
     *
     * @param  \App\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->beforeUpdate();

        $this->validate($request, $this->rules, $this->messages);

        $item = call_user_func($this->model . '::findOrFail', $id);
        $item->update($request->all());

        $this->afterUpdate();

        if ($request->ajax()) {
            return json_encode([
                'status' => 'success',
                'data' => null
            ]);
        } else {
            return redirect()->route($this->route . '.index');
        }
    }

    /**
     * Hook for before data is validated and saved
     * @return None
     */
    protected function beforeUpdate() {}

    /**
     * Hook for after data has been saved
     * @return None
     */
    protected function afterUpdate() {}

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $item = call_user_func($this->model . '::findOrFail', $id);
        $item->delete();

        return redirect()->route($this->route . '.index')->with('success', $this->name_singular . ' has been deleted.');
    }

    /**
     * Generate querystring
     * @return None
     */
    protected function generateUrlMods()
    {
        $mods = [
            'perpage' => "perpage={$this->settings['perpage']}",
            'orderby' => "orderby={$this->settings['orderby']}",
            'order' => "order={$this->settings['order']}",
        ];

        if(!empty($this->settings['search'])) {
            $mods['search'] =  "search={$this->settings['search']}";
        }

        $this->url_mods = $mods;

        return;
    }

    /**
     * Filter query by search parameters
     * @param  Query $query
     * @return Query
     */
    protected function doSearch($query)
    {
        if(!empty($this->settings['search']) && !empty($this->searchables)) {
            $query->where(function($query) {
                $first = array_shift($this->searchables);
                $query->where("{$first}", 'like', "%{$this->settings['search']}%");

                foreach($this->searchables as $column_name) {
                    $query->orWhere("{$column_name}", 'like', "%{$this->settings['search']}%");
                }
            });
        }

        return $query;
    }

    protected function finishQuery($query)
    {
      $query->orderBy($this->settings['orderby'], $this->settings['order']);
      $query = $this->doSearch($query);
      $query->groupBy($this->group_by);

      if($this->paginate) return $query->paginate($this->settings['perpage']);
      else return $query->get();
    }

    /**
     * Add a class to be attached to the body tag
     * @param string $class
     */
    public function addBodyClass($class)
    {
        $this->body_classes[] = $class;
        view()->share('body_classes', $this->body_classes);
    }
}
