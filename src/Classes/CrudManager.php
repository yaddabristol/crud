<?php namespace Yaddabristol\Crud\Classes;

use Yaddabristol\Crud\Exceptions\InvalidCrudInitialisationException;
use Yaddabristol\Crud\Controllers\CrudController;

class CrudManager {

    /**
     * The directory that views are stored in. E.g. 'admin.model'
     * @var string
     */
    protected $views_dir;

    /**
     * The name of the model handled by this controller.
     * @var string
     */
    protected $name_singular;

    /**
     * The plural name of the model handled by this controller.
     * @var string
     */
    protected $name_plural;

    /**
     * The base route for this controller.
     * @var string
     */
    protected $route;

    /**
     * Classes to be added to the body tag
     */
    protected $body_classes = [];

    /**
     * Index page table column headings and associated attributes
     */
    protected $table_columns = [];

    /**
     * Fields to use in autogenerated form. The options specified here only
     * affect the HTML that is generated by autoform.blade.php. They do not
     * otherwise affect the application. Because of this you can easily create
     * your own field types by just creating a blade file.
     * e.g. views/fields/YOURFIELDNAME.blade.php
     */
    protected $form_fields = [];

    protected $allowed_attirbutes = ['views_dir', 'name_singular', 'name_plural', 
        'route', 'body_classes', 'table_columns', 'paginate', 'form_fields'];

    /**
     * Applies a set of data to this object
     * 
     * @param  Mixed        $attributes   Array or instance of CrudController
     * @return CrudManager                Modified $this
     */
    public function initialize($attributes)
    {
        // if $attributes is an instance of crud controller pull properties,
        // otherwise ensure attributes is an array
        if(is_object($attributes) && $attributes instanceof CrudController)
            $attributes = $attributes->getCrudAttributes(); 
        elseif(!is_array($attributes))
            throw new InvalidCrudInitialisationException("Data passed in incorrect format");
    
        foreach($attributes as $attribute_name => $attribute_value) {
            if(!in_array($attribute_name, $this->allowed_attirbutes))
                throw new InvalidCrudInitialisationException("Attempted to set unrecognised value: {$attribute_name}");

            $this->$attribute_name = $attribute_value;
        }
    
        return $this;
    }

    /**
     * Getter function for properties
     * 
     * @param  string       $property_name      name of property to get
     * @return mixed                            property value or null
     */
    public function getProperty($property_name)
    {
        return (property_exists($this, $property_name) ? $this->$property_name : null);
    }

    /**
     * Returns all the body classes as a space separated string
     * 
     * @return string
     */
    public function getBodyClassString() 
    {
        return implode(' ', $this->body_classes);
    }

    /**
     * Adds an array of classes to the body classes array, removing duplicates
     * @param   mixed       $classes        classes to add
     */
    public function addBodyClasses($classes)
    {
        if(is_array($classes)) {
            foreach($classes as $class) {
                $this->addBodyClass($class);
            }
        } else {
            $this->addBodyClass($classes);
        }
    }

    /**
     * Adds a single class to the body classes array, if it isn't already present
     * @param   string      $class          class to add
     * @return  CrudManager                 $this
     */
    protected function addBodyClass($class)
    {
        if(!stringTest($class))
            throw new InvalidCrudInitialisationException("Classes passed to addBodyClasses must be strings");

        if(!in_array($class, $this->body_classes))
            $this->body_classes[] = (string) $class;
    }

    /**
     * Delegates removes a/some body class(es) from the current array, if they exist, 
     * to the protected method
     * 
     * @param  mixed        $classes        array of classes or string of single class
     *                                      to remove
     */
    public function removeBodyClasses($classes)
    {
        if(is_array($classes)) {
            foreach($classes as $class) {
                $this->removeBodyClass($class);
            }
        } else {
            $this->removeBodyClass($classes);
        }
    }

    /**
     * Function that does the actual removeing of a class from the array.
     * 
     * @param  string       $class          class to remove
     */
    protected function removeBodyClass($class)
    {
        if(!stringTest($class))
            throw new InvalidCrudInitialisationException("Classes passed to addBodyClasses must bt strings");

        if(false !== $key = array_search($class, $this->body_classes))
            unset($this->body_classes[$key]);
    }

    /**
     * Returns a count of the tabs this will currently create
     * 
     * @return integer          tab count
     */
    public function tabsCount()
    {
        return count($this->form_fields);
    }

    /**
     * Adds an array of fields to the body fields array, removing duplicates
     * @param   string      $tab_name      tab to add
     * @param   array       $fields        fields to add
     */
    public function addFormFields($tab_name, $fields)
    {
        foreach($fields as $field_name => $field_data) {
            $this->addFormField($tab_name, $field_name, $field_data);
        }
    }

    /**
     * Adds a single field to the body fields array, if it isn't already present
     * @param   string      $tab_name       tab name
     * @param   string      $field_name     field name
     * @param   array       $field_data     field data to add to array
     * @param   boolean     $overwrite      whether to overwrite existing items if
     *                                      duplicate is given
     * @return  CrudManager                 $this
     */
    public function addFormField($tab_name, $field_name, $field_data, $overwrite = true)
    {
        if(!is_array($field_data))
            throw new InvalidCrudInitialisationException("Fields passed to addFormField(s) must be arrays of field data");

        if(!isset($this->form_fields[$tab_name]) || !array_key_exists($field_name, $this->form_fields[$tab_name]) || $overwrite)
            $this->form_fields[$tab_name][$field_name] = $field_data;
    }
}